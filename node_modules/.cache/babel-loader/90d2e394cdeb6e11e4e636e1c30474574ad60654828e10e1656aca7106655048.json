{"ast":null,"code":"import * as Yup from \"yup\";\nimport { createNewCategoryService, getCategoriesService } from \"../../services/category\";\nexport const handleGetParentsCategories = async setParents => {\n  try {\n    const res = await getCategoriesService();\n    if (res.status == 200) {\n      const allParents = res.data.data;\n      setParents(allParents.map(d => ({\n        id: d.id,\n        value: d.title\n      })));\n    } else {\n      console.log(\"error\");\n    }\n  } catch (error) {}\n};\n\n//====================== 📍initialValues =====================\nexport const initialValues = {\n  title: \"\",\n  description: \"\",\n  parent_id: \"\",\n  is_active: true,\n  show_in_menu: true,\n  image: null\n};\n\n//====================== 📍onSubmit ===========================\n\nexport const onSubmit = async values => {\n  console.log(\"submit\");\n  const res = await createNewCategoryService(values);\n  console.log(res);\n};\n\n//====================== 📍validationSchema ===================\nexport const validationSchema = Yup.object({\n  parent_id: Yup.number(),\n  title: Yup.string().required(\"لطفا این قسمت را پر کنید\").matches(/^[\\u0600-\\u06FF\\sa-zA-Z0-9@!%$?&]+$/, \"فقط از حروف و اعداد استفاده شود\"),\n  description: Yup.string().matches(/^[\\u0600-\\u06FF\\sa-zA-Z0-9@!%$?&]+$/, \"فقط از حروف و اعداد استفاده شود\"),\n  // image: Yup.mixed()\n  //   .test(\"filesize\", \"حجم فایل نمیتواند بیشتر 500 کیلوبایت باشد\", (value) =>\n  //     !value ? true : value.size <= 500 * 1024\n  //   )\n  //   .test(\"format\", \"فرمت فایل باید jpg باشد\", (value) =>\n  //     !value ? true : value.type === \"image/jpeg\"\n  //   ),\n\n  is_active: Yup.boolean(),\n  show_in_menu: Yup.boolean()\n});","map":{"version":3,"names":["Yup","createNewCategoryService","getCategoriesService","handleGetParentsCategories","setParents","res","status","allParents","data","map","d","id","value","title","console","log","error","initialValues","description","parent_id","is_active","show_in_menu","image","onSubmit","values","validationSchema","object","number","string","required","matches","boolean"],"sources":["C:/Users/Admin/Desktop/alizadeh/admin_panel/src/components/formik/FormikAtt_AddItems.jsx"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport { createNewCategoryService, getCategoriesService } from \"../../services/category\";\r\n\r\n\r\n\r\nexport const handleGetParentsCategories = async (setParents) => {\r\n    try {\r\n      const res = await getCategoriesService();\r\n      if (res.status == 200) {  \r\n        const allParents = res.data.data;\r\n        setParents(allParents.map((d) => ({ id: d.id, value: d.title })));\r\n      } else {\r\n        console.log(\"error\");\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  //====================== 📍initialValues =====================\r\nexport  const initialValues = {\r\n    title: \"\",\r\n    description: \"\",\r\n    parent_id: \"\",\r\n    is_active: true,\r\n    show_in_menu: true,\r\n    image: null,\r\n  };\r\n\r\n  //====================== 📍onSubmit ===========================\r\n\r\n export const onSubmit =async (values) => {\r\n    console.log(\"submit\");\r\n    const res =await createNewCategoryService(values);\r\n    console.log(res);\r\n  };\r\n\r\n  //====================== 📍validationSchema ===================\r\n export const validationSchema = Yup.object({\r\n    parent_id: Yup.number(),\r\n\r\n    title: Yup.string()\r\n      .required(\"لطفا این قسمت را پر کنید\")\r\n      .matches(\r\n        /^[\\u0600-\\u06FF\\sa-zA-Z0-9@!%$?&]+$/,\r\n        \"فقط از حروف و اعداد استفاده شود\"\r\n      ),\r\n\r\n    description: Yup.string().matches(\r\n      /^[\\u0600-\\u06FF\\sa-zA-Z0-9@!%$?&]+$/,\r\n      \"فقط از حروف و اعداد استفاده شود\"\r\n    ),\r\n\r\n    // image: Yup.mixed()\r\n    //   .test(\"filesize\", \"حجم فایل نمیتواند بیشتر 500 کیلوبایت باشد\", (value) =>\r\n    //     !value ? true : value.size <= 500 * 1024\r\n    //   )\r\n    //   .test(\"format\", \"فرمت فایل باید jpg باشد\", (value) =>\r\n    //     !value ? true : value.type === \"image/jpeg\"\r\n    //   ),\r\n\r\n    is_active: Yup.boolean(),\r\n    show_in_menu: Yup.boolean(),\r\n  });\r\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,SAASC,wBAAwB,EAAEC,oBAAoB,QAAQ,yBAAyB;AAIxF,OAAO,MAAMC,0BAA0B,GAAG,MAAOC,UAAU,IAAK;EAC5D,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,oBAAoB,CAAC,CAAC;IACxC,IAAIG,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;MACrB,MAAMC,UAAU,GAAGF,GAAG,CAACG,IAAI,CAACA,IAAI;MAChCJ,UAAU,CAACG,UAAU,CAACE,GAAG,CAAEC,CAAC,KAAM;QAAEC,EAAE,EAAED,CAAC,CAACC,EAAE;QAAEC,KAAK,EAAEF,CAAC,CAACG;MAAM,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACtB;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE,CAAC;AACnB,CAAC;;AAED;AACF,OAAQ,MAAMC,aAAa,GAAG;EAC1BJ,KAAK,EAAE,EAAE;EACTK,WAAW,EAAE,EAAE;EACfC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,IAAI;EACfC,YAAY,EAAE,IAAI;EAClBC,KAAK,EAAE;AACT,CAAC;;AAED;;AAED,OAAO,MAAMC,QAAQ,GAAE,MAAOC,MAAM,IAAK;EACtCV,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACrB,MAAMV,GAAG,GAAE,MAAMJ,wBAAwB,CAACuB,MAAM,CAAC;EACjDV,OAAO,CAACC,GAAG,CAACV,GAAG,CAAC;AAClB,CAAC;;AAED;AACD,OAAO,MAAMoB,gBAAgB,GAAGzB,GAAG,CAAC0B,MAAM,CAAC;EACxCP,SAAS,EAAEnB,GAAG,CAAC2B,MAAM,CAAC,CAAC;EAEvBd,KAAK,EAAEb,GAAG,CAAC4B,MAAM,CAAC,CAAC,CAChBC,QAAQ,CAAC,0BAA0B,CAAC,CACpCC,OAAO,CACN,qCAAqC,EACrC,iCACF,CAAC;EAEHZ,WAAW,EAAElB,GAAG,CAAC4B,MAAM,CAAC,CAAC,CAACE,OAAO,CAC/B,qCAAqC,EACrC,iCACF,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAV,SAAS,EAAEpB,GAAG,CAAC+B,OAAO,CAAC,CAAC;EACxBV,YAAY,EAAErB,GAAG,CAAC+B,OAAO,CAAC;AAC5B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}