{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\alizadeh\\\\admin_panel\\\\src\\\\components\\\\pages\\\\main_page\\\\MainPage_chart.jsx\";\nimport React from \"react\";\nimport chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainPage_chart = () => {\n  const config = {\n    type: 'polarArea',\n    data: data,\n    options: {\n      responsive: true,\n      scales: {\n        r: {\n          pointLabels: {\n            display: true,\n            centerPointLabels: true,\n            font: {\n              size: 18\n            }\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: 'Chart.js Polar Area Chart With Centered Point Labels'\n        }\n      }\n    }\n  };\n  const DATA_COUNT = 5;\n  const NUMBER_CFG = {\n    count: DATA_COUNT,\n    min: 0,\n    max: 100\n  };\n  const labels = ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];\n  const data = {\n    labels: labels,\n    datasets: [{\n      label: 'Dataset 1',\n      // data: Utils.numbers(NUMBER_CFG),\n      backgroundColor: [\n        // Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n        // Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),\n        // Utils.transparentize(Utils.CHART_COLORS.yellow, 0.5),\n        // Utils.transparentize(Utils.CHART_COLORS.green, 0.5),\n        // Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      ]\n    }]\n  };\n  const actions = [{\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data = /*#__PURE__*/_jsxDEV(Utils, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 26\n        }, this).numbers({\n          count: chart.data.labels.length,\n          min: 0,\n          max: 100\n        });\n      });\n      chart.update();\n    }\n  }, {\n    name: 'Add Data',\n    handler(chart) {\n      const data = chart.data;\n      if (data.datasets.length > 0) {\n        data.labels.push('data #' + (data.labels.length + 1));\n        for (let index = 0; index < data.datasets.length; ++index) {\n          // data.datasets[index].data.push(Utils.rand(0, 100));\n        }\n        chart.update();\n      }\n    }\n  }, {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.pop();\n      });\n      chart.update();\n    }\n  }];\n};\n_c = MainPage_chart;\nvar _c;\n$RefreshReg$(_c, \"MainPage_chart\");","map":{"version":3,"names":["React","chart","jsxDEV","_jsxDEV","MainPage_chart","config","type","data","options","responsive","scales","r","pointLabels","display","centerPointLabels","font","size","plugins","legend","position","title","text","DATA_COUNT","NUMBER_CFG","count","min","max","labels","datasets","label","backgroundColor","actions","name","handler","forEach","dataset","Utils","fileName","_jsxFileName","lineNumber","columnNumber","numbers","length","update","push","index","splice","pop","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/alizadeh/admin_panel/src/components/pages/main_page/MainPage_chart.jsx"],"sourcesContent":["import React from \"react\";\r\nimport chart from 'chart.js/auto'\r\nexport const MainPage_chart = () => {\r\n\r\n  const config = {\r\n    type: 'polarArea',\r\n    data: data,\r\n    options: {\r\n      responsive: true,\r\n      scales: {\r\n        r: {\r\n          pointLabels: {\r\n            display: true,\r\n            centerPointLabels: true,\r\n            font: {\r\n              size: 18\r\n            }\r\n          }\r\n        }\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          position: 'top',\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Chart.js Polar Area Chart With Centered Point Labels'\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  const DATA_COUNT = 5;\r\n  const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};\r\n  \r\n  const labels = ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];\r\n  const data = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: 'Dataset 1',\r\n        // data: Utils.numbers(NUMBER_CFG),\r\n        backgroundColor: [\r\n          // Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\r\n          // Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),\r\n          // Utils.transparentize(Utils.CHART_COLORS.yellow, 0.5),\r\n          // Utils.transparentize(Utils.CHART_COLORS.green, 0.5),\r\n          // Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n  \r\n  const actions = [\r\n    {\r\n      name: 'Randomize',\r\n      handler(chart) {\r\n        chart.data.datasets.forEach(dataset => {\r\n          dataset.data = <Utils></Utils>.numbers({count: chart.data.labels.length, min: 0, max: 100});\r\n        });\r\n        chart.update();\r\n      }\r\n    },\r\n    {\r\n      name: 'Add Data',\r\n      handler(chart) {\r\n        const data = chart.data;\r\n        if (data.datasets.length > 0) {\r\n          data.labels.push('data #' + (data.labels.length + 1));\r\n  \r\n          for (let index = 0; index < data.datasets.length; ++index) {\r\n            // data.datasets[index].data.push(Utils.rand(0, 100));\r\n          }\r\n  \r\n          chart.update();\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: 'Remove Data',\r\n      handler(chart) {\r\n        chart.data.labels.splice(-1, 1); // remove the label first\r\n  \r\n        chart.data.datasets.forEach(dataset => {\r\n          dataset.data.pop();\r\n        });\r\n  \r\n        chart.update();\r\n      }\r\n    }\r\n  ];\r\n\r\n\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}