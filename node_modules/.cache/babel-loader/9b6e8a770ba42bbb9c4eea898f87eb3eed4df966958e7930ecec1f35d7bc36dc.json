{"ast":null,"code":"import * as Yup from \"yup\";\nimport { createNewCategoryService, getCategoriesService } from \"../../services/CRUD_categoryService\";\nimport swal from \"sweetalert\";\nexport const handleGetParentsCategories = async setParents => {\n  try {\n    const res = await getCategoriesService();\n    if (res.status == 200) {\n      const allParents = res.data.data;\n      setParents(allParents.map(d => ({\n        id: d.id,\n        value: d.title\n      })));\n    }\n  } catch {}\n};\n\n//====================== 📍initialValues =====================\nexport const initialValues = {\n  title: \"\",\n  description: \"\",\n  parent_id: \"\",\n  is_active: true,\n  show_in_menu: true,\n  image: \"\"\n};\n\n//====================== 📍onSubmit ===========================\n\nexport const onSubmit = async (values, actions, formik, categoryId) => {\n  console.log(categoryId);\n  if (categoryId) {} else {}\n};\n\n//====================== 📍validationSchema ===================\nexport const validationSchema = Yup.object({\n  parent_id: Yup.number(),\n  title: Yup.string().required(\"لطفا این قسمت را پر کنید\").matches(/^[\\u0600-\\u06FF\\sa-zA-Z0-9@!%$?&]+$/, \"فقط از حروف و اعداد استفاده شود\"),\n  description: Yup.string().matches(/^[\\u0600-\\u06FF\\sa-zA-Z0-9@!%$?&]+$/, \"فقط از حروف و اعداد استفاده شود\"),\n  // image: Yup.mixed()\n  //   .test(\"filesize\", \"حجم فایل نمیتواند بیشتر 500 کیلوبایت باشد\", (value) =>\n  //     !value ? true : value.size <= 500 * 1024\n  //   )\n  //   .test(\"format\", \"فرمت فایل باید jpg باشد\", (value) =>\n  //     !value ? true : value.type === \"image/jpeg\"\n  //   ),\n\n  is_active: Yup.boolean(),\n  show_in_menu: Yup.boolean()\n});","map":{"version":3,"names":["Yup","createNewCategoryService","getCategoriesService","swal","handleGetParentsCategories","setParents","res","status","allParents","data","map","d","id","value","title","initialValues","description","parent_id","is_active","show_in_menu","image","onSubmit","values","actions","formik","categoryId","console","log","validationSchema","object","number","string","required","matches","boolean"],"sources":["C:/Users/f.alizadeh/Desktop/alizadeh/admin_panel/src/components/formik/FormikAtt_AddItems.jsx"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport {\r\n  createNewCategoryService,\r\n  getCategoriesService,\r\n} from \"../../services/CRUD_categoryService\";\r\nimport swal from \"sweetalert\";\r\n\r\nexport const handleGetParentsCategories = async (setParents) => {\r\n  try {\r\n    const res = await getCategoriesService();\r\n    if (res.status == 200) {\r\n      const allParents = res.data.data;\r\n      setParents(allParents.map((d) => ({ id: d.id, value: d.title })));\r\n    }\r\n  } catch {}\r\n};\r\n\r\n//====================== 📍initialValues =====================\r\nexport const initialValues = {\r\n  title: \"\",\r\n  description: \"\",\r\n  parent_id: \"\",\r\n  is_active: true,\r\n  show_in_menu: true,\r\n  image: \"\",\r\n};\r\n\r\n//====================== 📍onSubmit ===========================\r\n\r\nexport const onSubmit = async (values, actions, formik ,categoryId) => {\r\nconsole.log(categoryId);\r\n\r\nif (categoryId) {\r\n  \r\n}else{\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\n//====================== 📍validationSchema ===================\r\nexport const validationSchema = Yup.object({\r\n  parent_id: Yup.number(),\r\n\r\n  title: Yup.string()\r\n    .required(\"لطفا این قسمت را پر کنید\")\r\n    .matches(\r\n      /^[\\u0600-\\u06FF\\sa-zA-Z0-9@!%$?&]+$/,\r\n      \"فقط از حروف و اعداد استفاده شود\"\r\n    ),\r\n\r\n  description: Yup.string()\r\n  .matches(\r\n    /^[\\u0600-\\u06FF\\sa-zA-Z0-9@!%$?&]+$/,\r\n    \"فقط از حروف و اعداد استفاده شود\"\r\n  ),\r\n\r\n  // image: Yup.mixed()\r\n  //   .test(\"filesize\", \"حجم فایل نمیتواند بیشتر 500 کیلوبایت باشد\", (value) =>\r\n  //     !value ? true : value.size <= 500 * 1024\r\n  //   )\r\n  //   .test(\"format\", \"فرمت فایل باید jpg باشد\", (value) =>\r\n  //     !value ? true : value.type === \"image/jpeg\"\r\n  //   ),\r\n\r\n  is_active: Yup.boolean(),\r\n  show_in_menu: Yup.boolean(),\r\n});\r\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,SACEC,wBAAwB,EACxBC,oBAAoB,QACf,qCAAqC;AAC5C,OAAOC,IAAI,MAAM,YAAY;AAE7B,OAAO,MAAMC,0BAA0B,GAAG,MAAOC,UAAU,IAAK;EAC9D,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMJ,oBAAoB,CAAC,CAAC;IACxC,IAAII,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;MACrB,MAAMC,UAAU,GAAGF,GAAG,CAACG,IAAI,CAACA,IAAI;MAChCJ,UAAU,CAACG,UAAU,CAACE,GAAG,CAAEC,CAAC,KAAM;QAAEC,EAAE,EAAED,CAAC,CAACC,EAAE;QAAEC,KAAK,EAAEF,CAAC,CAACG;MAAM,CAAC,CAAC,CAAC,CAAC;IACnE;EACF,CAAC,CAAC,MAAM,CAAC;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BD,KAAK,EAAE,EAAE;EACTE,WAAW,EAAE,EAAE;EACfC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,IAAI;EACfC,YAAY,EAAE,IAAI;EAClBC,KAAK,EAAE;AACT,CAAC;;AAED;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,UAAU,KAAK;EACvEC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;EAEvB,IAAIA,UAAU,EAAE,CAEhB,CAAC,MAAI,CAEL;AAQA,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAG5B,GAAG,CAAC6B,MAAM,CAAC;EACzCZ,SAAS,EAAEjB,GAAG,CAAC8B,MAAM,CAAC,CAAC;EAEvBhB,KAAK,EAAEd,GAAG,CAAC+B,MAAM,CAAC,CAAC,CAChBC,QAAQ,CAAC,0BAA0B,CAAC,CACpCC,OAAO,CACN,qCAAqC,EACrC,iCACF,CAAC;EAEHjB,WAAW,EAAEhB,GAAG,CAAC+B,MAAM,CAAC,CAAC,CACxBE,OAAO,CACN,qCAAqC,EACrC,iCACF,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAf,SAAS,EAAElB,GAAG,CAACkC,OAAO,CAAC,CAAC;EACxBf,YAAY,EAAEnB,GAAG,CAACkC,OAAO,CAAC;AAC5B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}